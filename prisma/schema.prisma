// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// A User can either be a boss or worker, not both
model User {
  id              Int         @id @default(autoincrement())
  name            String
  username        String      @unique
  email           String      @default("")
  password        String
  boss            Boss?       @relation
  worker          Worker?     @relation
  settings        Settings?
  transactions    Transaction[]
  logs            Log[]
  layaways        Layaway[]
}

// A Boss has one User (one-to-one)
// A Boss can have many stores (one to many)
model Boss {
  id              Int         @id @default(autoincrement())
  user_id         Int         @unique
  user            User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  stores          Store[]
}

// Settings has one User (one-to-one)
model Settings {
  id              Int         @id @default(autoincrement())
  user_id         Int         @unique
  user            User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  ip              String      @default("")
  language        String      @default("en")
}

// A Store has one Boss (one to one)
// A Store has an inventory (one to one)
// A Store has multiple workers (one to many)
// A Store has multiple transactions (one to many)
// A Store has multiple logs (one to many)
model Store {
  id                Int         @id @default(autoincrement())
  name              String
  code              String      @unique
  boss_id           Int      
  boss              Boss        @relation(fields: [boss_id], references: [id])

  inventory         Inventory?
  workers           Worker[]
  transactions      Transaction[]
  layaways          Layaway[]
  logs              Log[]
  customers         Customer[]

  tax               Float       @default(0)
  header            Json?
  footer            Json?
  invoice_notes     Json?

  phone             String?     @default("")
  email             String?     @default("")
  website           String?     @default("")
  // Address fields
  address           String?     @default("")
  city              String?     @default("")
  zipcode           String?     @default("")
  state             String?     @default("")
  country           String?     @default("")
}

// A Worker has one User (one to one)
// Workers belongs to one Store (many to one)
model Worker {
  id              Int         @id @default(autoincrement())
  user_id         Int         @unique
  user            User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  store_id        Int      
  store           Store       @relation(fields: [store_id], references: [id])
  permission      Permission? 
}

// An Inventory belongs to one store (one to one)
model Inventory {
  id              Int         @id @default(autoincrement())
  store_id        Int         @unique
  store           Store       @relation(fields: [store_id], references: [id], onDelete: Cascade)
  unique_key      Int         
  version         Int         @default(0)
  stock           Json
  columns         String[]    @default([])
  name_column     String      @default("")
  price_column    String      @default("")
  quantity_column String      @default("")
  discount_column String      @default("")
  cost_column     String      @default("")
}

// Transactions belongs to one store (many to one)
model Transaction {
  id              Int         @id @default(autoincrement())
  timestamp       DateTime    @default(now())
  store_id        Int         
  store           Store       @relation(fields: [store_id], references: [id], onDelete: Cascade)
  user_id         Int?         
  user            User?       @relation(fields: [user_id], references: [id])
  name            String      @default("")
  items           Json        //[name, qty, price, discount, cost]
  tax             Float       @default(0)
  payment         String      @default("cash") //cash, credit card, check
  cash            Float       @default(0)
  card            String      @default("")
  check           String      @default("")
}

// Inventory Logs belongs to one store (many to one)
model Log {
  id              Int         @id @default(autoincrement())
  timestamp       DateTime    @default(now())
  store_id        Int         
  store           Store       @relation(fields: [store_id], references: [id], onDelete: Cascade)
  user_id         Int?         
  user            User?       @relation(fields: [user_id], references: [id])
  name            String      @default("")
  item_id         Int         @default(-1)
  action          String      //Export; Add, Edit, Delete Item; Add, Edit, Delete Column;
  before          Json?        
  after           Json?
}

// Inventory Logs belongs to one store (many to one)
model Permission {
  id                Int         @id @default(autoincrement())
  worker_id         Int         @unique
  worker            Worker      @relation(fields: [worker_id], references: [id], onDelete: Cascade)

  add_item          Boolean     @default(true)
  edit_item         Boolean     @default(true)
  delete_item       Boolean     @default(false)

  view_log          Boolean     @default(true)
  make_transactions Boolean     @default(true)
  receiving         Boolean     @default(false)
}

// Layaway belongs to one store (many to one)
// Layaway transaction belongs to a customer
model Layaway {
  id              Int         @id @default(autoincrement())
  timestamp       DateTime    @default(now())
  status          String      @default("pending")  //Pending, Paid, Declined
  store_id        Int         
  store           Store       @relation(fields: [store_id], references: [id], onDelete: Cascade)
  user_id         Int?         
  user            User?       @relation(fields: [user_id], references: [id])
  customer_id     Int         
  customer        Customer    @relation(fields: [customer_id], references: [id])
  name            String      @default("")
  items           Json        //[name, qty, price, discount, cost]
  tax             Float       @default(0)
  payment         String      @default("") //cash, credit card, check
  cash            Float       @default(0)
  card            String      @default("")
  check           String      @default("")
}

// Customer can have many layaways
model Customer {
  id                Int         @id @default(autoincrement())
  store_id          Int         
  store             Store       @relation(fields: [store_id], references: [id], onDelete: Cascade)
  name              String      
  company           String?     @default("")
  phone             String?     @default("")
  email             String?     @default("")
  // Address fields
  address           String?     @default("")
  city              String?     @default("")
  zipcode           String?     @default("")
  state             String?     @default("")
  country           String?     @default("")
  layaways          Layaway[]
}